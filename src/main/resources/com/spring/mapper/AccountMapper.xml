<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.AccountMapper">

<!-- ano 있나없나 deposittbl exists 조회 -->
	<select id="exists_deposit_ano" resultType="int">
		select count(ano) from deposittbl
		where ano=#{ano}
	</select>

	<insert id="create_deposit">
		insert into deposittbl(cno, ano, type, product, password, balance, day_withdraw, max_withdraw, branch)
		values(#{cno}, #{ano}, #{type}, #{product}, #{password}, 0, #{day_withdraw}, #{max_withdraw}, #{branch})
	</insert>
	
	
	<select id="get_deposit_list" resultType="com.spring.domain.DepositVO">
		select * from deposittbl where dno > 0 order by dno desc

	</select>


	<!-- 상품 조회 -->
	<select id="getProduct" resultType="com.spring.domain.ProductVO">
		select product, p_name from producttbl
		where round(product/100)=#{type}
	
	</select>

	<!-- ano로 계좌정보 -->
	<select id="getRow" resultType="com.spring.domain.DepositVO">
		<!-- select a.ano, producttbl.p_name, a.day_withdraw, a.max_withdraw, a.balance from (select * from deposittbl where ano=#{ano}) a
		left join producttbl
		on a.product = producttbl.product -->
		select d.ano, d.p_name, d.day_withdraw, d.max_withdraw, d.balance, h.depositdate from (select a.ano, producttbl.p_name, a.day_withdraw, a.max_withdraw, a.balance from (select * from deposittbl where ano=#{ano}) a
		left join producttbl
		on a.product = producttbl.product) d
        left join (select * from deposit_history where ano=#{ano} and rownum=1 order by depositdate desc) h
        on d.ano=h.ano
		
	</select>


	<!-- 계좌 정보 수정 (max, day withdraw) -->
	<update id="update_withdraw">
		update deposittbl set max_withdraw=#{max_withdraw}, day_withdraw=#{day_withdraw}, updatedate=sysdate
		where ano=#{ano}
	
	</update>
	<!-- 계좌 비밀번호 수정 -->
	<update id="update_password">
		update deposittbl set password=#{password}, updatedate=sysdate
		where ano=#{ano}
	</update>


	<!-- 계좌 비밀번호 받기 -->
	<select id="get_password" resultType="String">
		select password from deposittbl
		where ano=#{ano}
	</select>
	
	
	<!-- 계좌 삭제 --> 			<!-- 카드확인 추가해야함 -->
	<delete id="delete">
		delete from deposittbl
		where ano=#{ano}
	
	</delete>
	
	<!-- 계좌 잔액 -->
	<select id="get_balance" resultType="int">
		select balance from deposittbl
		where ano=#{ano}
	</select>
	
	
	<!-- ano로 고객이름, cno, ano -->
	<select id="check_ano" resultType="com.spring.domain.DepositVO">
		select customertbl.name, d.cno, d.ano, d.balance 
		from (select cno, ano, balance from deposittbl where ano = #{ano}) d
		join customertbl
		on customertbl.cno = d.cno
	</select>
	
	
	<!-- 계좌 입금 -->	
	<insert id="deposit_hist">
		insert into deposit_history(hno, from_ano, ano, name, deposit, balance, depositdate)
		values(seq_deposit_history.nextVal, #{from_ano}, #{ano}, #{name}, #{amount}, (select balance from deposittbl where ano=#{ano})+#{amount}, sysdate)
	</insert>
	
	<!-- 계좌 출금 -->	
	<insert id="withdraw_hist">
		insert into deposit_history(hno, from_ano, ano, name, withdrawal, balance, depositdate)
		values(seq_deposit_history.nextVal, #{from_ano}, #{ano}, #{name}, #{amount}, (select balance from deposittbl where ano=#{ano})-#{amount}, sysdate)
	</insert>
	
	
	<update id="updateBalance_after"  parameterType="com.spring.domain.DepositVO">
		<selectKey keyProperty="balance" order="BEFORE" resultType="int">
			select balance from
			(select rownum, balance from deposit_history where ano=#{ano} order by depositdate desc)
			where rownum=1
		</selectKey>
		update deposittbl set balance=#{balance}
		where ano=#{ano}
	</update>
</mapper>