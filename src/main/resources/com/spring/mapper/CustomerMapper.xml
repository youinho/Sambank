<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.CustomerMapper">


<!-- cno로 고객정보 -->
	<select id="select_by_cno" resultType="com.spring.domain.CustomerVO">
		select cno, name, eng_name, gender, birth, address, mobile, id, email from customertbl
		where cno=#{cno}
	</select>
	
<!-- id로 고객정보 -->
	<select id="select_by_id" resultType="com.spring.domain.CustomerVO">
		select cno, name, eng_name, gender, birth, address, mobile, id, email, enabled from customertbl
		where id=#{id}
	</select>
	
	

<!-- cno로 고객정보 (이름, 계좌정보) -->
	<select id="select_acc_info" resultType="com.spring.domain.Acc_info">
		 select c.name, d.ano from (select * from customertbl where cno=#{cno}) c
		left join (select * from deposittbl where cno=#{cno}) d
		on c.cno=d.cno
	</select>

<!-- 고객 정보 수정 -->
	<update id="update_customer">
		update customertbl 
		set name=#{name}, eng_name=#{eng_name}, gender=#{gender}, birth=#{birth}, address=#{address}, mobile=#{mobile}, email=#{email}
		where cno=#{cno}
	
	</update>

<!-- 고객 정보 삭제 -->
	<delete id="delete_customer">
		delete from customertbl
		where cno=#{cno} and id=#{id} and birth=#{birth} and mobile=#{mobile}
	</delete>


<!-- search (name, birth, mobile) -->
	<select id="search_customer" resultType="com.spring.domain.CustomerVO">
	<![CDATA[
		select /*+INDEX_DESC(customertbl customertbl_index)*/
		 cno, name, birth, mobile, address 
		from customertbl
		where cno > 0 and name like '%'||#{name}||'%' and birth like '%'||#{birth}||'%' and mobile like '%'||#{mobile}||'%' and rownum < 100
		order by cno desc
	]]>
	</select>


<!-- id 아이디 중복 체크 -->
	<select id="checkId" resultType="int">
		select count(*) from customertbl
		where id=#{id}
	</select>

<!-- 고객 등록 -->
	<insert id="register_customer">
		insert into customertbl(cno, name, eng_name, gender, birth, address, mobile, id, password, email) 
		values(seq_customer.nextVal, #{name}, #{eng_name}, #{gender}, #{birth}, #{address}, #{mobile}, #{id}, #{password}, #{email}) 
	
	</insert>


<!-- 고객 비밀번호 받기 -->
	<select id="get_password" resultType="String">
		select password from customertbl
		where id=#{id}
	</select>


<!-- 고객 비밀번호 변경 -->
	<update id="update_password">
		update customertbl set password=#{password}
		where id=#{id}
	</update>
	
	
	<update id="update_login_failure_count">
		update customertbl set failed_login_count=failed_login_count+1
		where id=#{id}
	</update>
	<update id="init_login_failure_count">
		update customertbl set failed_login_count=0
		where id=#{id}
	</update>
	<select id="check_login_failure_count" resultType="int">
		select failed_login_count from customertbl
		where id=#{id}
	</select>
	<update id="set_disabled">
		update customertbl set enabled=0
		where id=#{id}
	</update>
	
	<update id="set_enabled">
		update customertbl set enabled=1
		where id=#{id}
	</update>
	
	<!-- security_get customer -->
	<select id="security_get_customer" resultType="security.Customer_UserDetails">
		select * from customertbl
		where id=#{id}
	</select>

	<insert id="insert_locked_customer">
		insert into locked_customer(id)
		values(#{id})
	</insert>
	
	<delete id="delete_locked_customer">
		delete from locked_customer
		where id=#{id}
	</delete>
	
	<select id="select_to_unlock" resultType="com.spring.domain.CustomerVO">
		<![CDATA[
			select id from locked_customer
			where unlockdate < sysdate
		]]>
	</select>


	<update id="insert_verifyKey">
		update customertbl set verifyKey=#{verifyKey}
		where id=#{id}
	</update>
	
	<update id="set_verified">
		update customertbl set verified=1
		where id=#{id} and verifyKey=#{verifyKey}
	</update>

	<update id="reset_sendCount">
		update customertbl set sendcount=0
		where sendcount>0
	</update>
	
	<update id="update_sendCount">
		update customertbl set sendcount=sendcount+1
		where id=#{id}
	</update>


</mapper>
